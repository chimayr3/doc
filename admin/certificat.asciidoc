Extensions :

 .key : clé privé
 .csr : fichier de demande de signature (Certificate Signing Request)
 .crt : certificat serveur
 .cer : certificat serveur (identique à .crt)
 .txt : chaine de certification
 .p7b : certificat au format PKCS7

==== Openssl

====== Afficher les informations d'un certificat

[source,bash]
----
openssl x509 -in domain.crt noout --text
----

====== Vérifier qu'un certificat est valide pour un CA

[source,bash]
----
openssl verify -CAfile ca.crt domain.crt
----

====== Créer une autorité de certificat

[source,bash]
----
openssl req -new -x509 -extensions v3_ca -newkey rsa:4096 -keyout ca.key -out ca.crt -config ca-config
----

 > req : utilitaire de génération de certificats et de demandes de certificat PKCS#10.
 > new : nouvelle demande de certificat.
 > x509 : cette option génère un certificat auto-signé à la place d'une demande de 
   certificat. Elle est utilisée typiquement pour générer des certificats de test ou 
   le certificat auto-signé racine d'une CA.
 > extensions v3_ca : permet de générer un certificat SSL v3, en se référant à la 
   section v3_ca du fichier de configuration d'OpenSSL.
 > newkey rsa:4096 : Génération d'une clé privée RSA de 4096 bits.
 > keyout private/ca.key : donne le nom de fichier où la clé privée créée sera écrite.
 > out certs/ca.crt : spécifie le nom du fichier (le certificat) de sortie.
 > config ca-config : permet d'utiliser un fichier de configuration alternatif, 
   à la place d'openssl.cn

==== Génération d'un certificat Web

====== Génération de la clé privé

[source,bash]
----
openssl genrsa 1024 > domain.key
# sécurisation de la clé
chmod 400 domain.key
----

====== Génération du fichier de demande de signature de certificat
(CSR Certificate Signing Request)

[source,bash]
----
openssl req -new -key domain.key > domain.csr

Country Name (2 letter code) [AU]:FR
State or Province Name (full name) [Some-State]:Nord
Locality Name (eg, city) []:Lille
Organization Name (eg, company) [Internet Widgits Pty Ltd]:IXD
Organizational Unit Name (eg, section) []:
Common Name (eg, YOUR name) []:domain.fr
Email Address []:
----

Deux choix possible :
1) envoyer le fichier CSR à un organisme (CA autorité de certification)
pour obtenier le certificat signé par la clé privée de l'organisme
2) signer moi même le certificat
 
====== Auto-signer le certificat

Génération de la clé privée de l'autorité de certification

[source,bash]
----
openssl genrsa -des3 1024 > ca.key
----

A partir de la clé privée, génération d'un certificat x509 pour une durée de validité d'un an auto-signé
(la valeur de 'Common Name' doit être différente de celui donné pour la clé)

[source,bash]
----
openssl req -new -x509 -days 365 -key ca.key > ca.crt

Country Name (2 letter code) [AU]:FR
State or Province Name (full name) [Some-State]:Nord
Locality Name (eg, city) []:Lille
Organization Name (eg, company) [Internet Widgits Pty Ltd]:IXD
Organizational Unit Name (eg, section) []:
Common Name (eg, YOUR name) []:cert_CA
Email Address []:
----

====== Signature du certificat serveur par le CA (Certificat Autority)

[source,bash]
----
openssl x509 -req -in domain.csr -out domain.crt -CA ca.crt -CAkey ca.key \
 -CAcreateserial -CAserial ca.srl
----

Certificat signé = domain.crt

=> il faut installer le certificat de l'autorité de certification (ca.crt) dans chaque navigateur client

==== Configuration Nginx

====== 1. Concaténer les 2 fichiers .cer et .txt

[source,bash]
----
cat domain.cer domain.txt > domain.chain.cer
----

====== 2. configurer Nginx

[source]
----
server {
  listen               443;
  server_name          www.domain.com;
  ssl                  on;
  ssl_certificate      domain.chain.cer;
  ssl_certificate_key  domain.key;
  ssl_protocols        TLSv1 TLSv1.1 TLSv1.2;
  ssl_ciphers          !ADH:!DSS:!RC2:!RC4:HIGH:MEDIUM:+AES128;
  ...
}
----

==== Configuration Apache

====== ApacheSSL

[source]
----
SSLEngine on
SSLCipherSuite ALL:!ADH:!DSS:!EXPORT56:!AES256-SHA:!DHE-RSA-AES256-SHA:@STRENGTH:+3DES:+DES
SSLProtocol ALL -SSLv2
SSLCertificateFile        conf/ssl/domain.crt
SSLCertificateKeyFile     conf/ssl/domain.key
SSLCertificateChainFile   conf/ssl/domain.chain.crt
----

====== Apache mod_ssl

[source]
----
SSLCertificateFile        conf/ssl/domain.crt
SSLCertificateKeyFile     conf/ssl/domain.key
SSLCertificateChainFile   conf/ssl/domain.chain.crt

# configuration du SSL
# 128-bit mini PFS favorisé
#SSLCipherSuite !ADH:!DSS:!RC2:HIGH:MEDIUM:+3DES:+RC4
# 128-bit securité maximale
SSLCipherSuite !ADH:!DSS:!RC4:HIGH:+3DES

SSLProtocol all -SSLv2 -SSLv3
SSLHonorCipherOrder on  # apache 2.1+
----
